"use client";

import { useState, useEffect } from "react";
import "./Cart.css";
import { useNavigate } from "react-router-dom";
import { Trash2, Plus, Minus, ArrowLeft, ShoppingBag } from "lucide-react";

const Cart = () => {
  const navigate = useNavigate();
  const [cart, setCart] = useState({ items: [] });
  const [loading, setLoading] = useState(true);
  const [promoCode, setPromoCode] = useState("");
  const [discount, setDiscount] = useState(0);
  const [promoApplied, setPromoApplied] = useState(false);

  // Stripe payment handler for card payments using the VISA icon.
  // It sends the cart items to the backend endpoint that creates
  // a Stripe Checkout session and returns a session URL.
  const handlePayment = async () => {
    const items = cart.items.map((item) => ({
      name: item.product.name,
      price: item.product.price, // in euros
      quantity: item.quantity,
    }));

    try {
      const response = await fetch("http://localhost:5000/api/payments/create-checkout-session", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items }),
      });
      const data = await response.json();
      if (data.url) {
        // This URL is generated by Stripe; it includes your cancel_url, so if the user cancels, they'll be brought home.
        window.location.href = data.url;
      } else {
        console.error("Error creating checkout session:", data.message);
      }
    } catch (error) {
      console.error("Error creating payment session:", error);
    }
  };

  // Fetch cart data from the API
  useEffect(() => {
    const fetchCart = async () => {
      try {
        const token = localStorage.getItem("token");
        let headers = { "Content-Type": "application/json" };
        if (token) headers["Authorization"] = `Bearer ${token}`;

        let cartData = { items: [] };

        if (token) {
          const response = await fetch("http://localhost:5000/api/cart", {
            method: "GET",
            headers,
          });

          if (!response.ok) throw new Error("Failed to fetch cart");

          const data = await response.json();
          if (data.items) {
            cartData = data;
          }
        } else {
          const guestCart = JSON.parse(localStorage.getItem("guestCart") || "[]");
          cartData.items = guestCart;
        }
        
        setCart(cartData);
      } catch (error) {
        console.error("Cart fetch error:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCart();
  }, []);

  const applyPromoCode = () => {
    if (promoCode === "SAVE10") {
      setDiscount(10);
      setPromoApplied(true);
    } else {
      alert("Code promo invalide");
    }
  };

  const updateQuantity = async (productId, newQuantity) => {
    if (newQuantity < 1) return;

    try {
      const token = localStorage.getItem("token");
      let headers = { "Content-Type": "application/json" };
      if (token) headers["Authorization"] = `Bearer ${token}`;

      if (token) {
        const response = await fetch("http://localhost:5000/api/cart", {
          method: "POST",
          headers,
          body: JSON.stringify({ productId, quantity: newQuantity }),
        });

        if (!response.ok) throw new Error("Failed to update quantity");
        
        // Local update of the affected item
        setCart((prevCart) => {
          const updatedItems = prevCart.items.map(item =>
            item.product._id === productId ? { ...item, quantity: newQuantity } : item
          );
          return { ...prevCart, items: updatedItems };
        });
      } else {
        const updatedItems = cart.items.map(item =>
          item.product._id === productId ? { ...item, quantity: newQuantity } : item
        );
        setCart({ ...cart, items: updatedItems });
        localStorage.setItem("guestCart", JSON.stringify(updatedItems));
      }
    } catch (error) {
      console.error("Update quantity error:", error);
    }
  };

  const removeItem = async (productId) => {
    try {
      const token = localStorage.getItem("token");
      let headers = { "Content-Type": "application/json" };
      if (token) headers["Authorization"] = `Bearer ${token}`;

      if (token) {
        const response = await fetch("http://localhost:5000/api/cart", {
          method: "DELETE",
          headers,
          body: JSON.stringify({ productId }),
        });
        
        if (!response.ok) throw new Error("Failed to remove item");

        const data = await response.json();
        if (data.items) setCart(data);
      } else {
        const updatedItems = cart.items.filter(item => item.product._id !== productId);
        setCart({ ...cart, items: updatedItems });
        localStorage.setItem("guestCart", JSON.stringify(updatedItems));
      }
    } catch (error) {
      console.error("Remove item error:", error);
    }
  };

  const clearCart = async () => {
    if (!window.confirm("Êtes-vous sûr de vouloir vider votre panier ?")) return;

    try {
      const token = localStorage.getItem("token");
      let headers = { "Content-Type": "application/json" };
      if (token) headers["Authorization"] = `Bearer ${token}`;

      if (token) {
        // The backend is expected to clear the cart when the clear endpoint is called (no body required)
        const response = await fetch("http://localhost:5000/api/cart/clear", {
          method: "DELETE",
          headers,
        });
        if (!response.ok) throw new Error("Échec lors du vidage du panier");
        setCart({ items: [] });
      } else {
        setCart({ items: [] });
        localStorage.removeItem("guestCart");
      }
    } catch (error) {
      console.error("Clear cart error:", error);
    }
  };

  const subtotal = cart.items.reduce(
    (sum, item) => sum + item.product.price * item.quantity,
    0
  );
  const tax = subtotal * 0.2;
  const shipping = subtotal > 500 ? 0 : 9.99;
  const total = subtotal + tax + shipping - discount;

  const formatPrice = (price) => {
    return price.toFixed(2).replace(".", ",") + " €";
  };

  if (loading) {
    return (
      <div className="cart-page">
        <div className="loading-cart">
          <p>Chargement du panier...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="cart-page">
      <div className="cart-container">
        <div className="cart-header">
          <h1>Votre Panier</h1>
          {cart.items.length > 0 && (
            <span className="item-count">
              {cart.items.length} article{cart.items.length > 1 ? "s" : ""}
            </span>
          )}
        </div>

        {cart.items.length === 0 ? (
          <div className="empty-cart">
            <div className="empty-cart-icon">
              <ShoppingBag size={64} />
            </div>
            <h2>Votre panier est vide</h2>
            <p>Vous n'avez pas encore ajouté d'articles à votre panier.</p>
            <button onClick={() => navigate("/")} className="continue-shopping">
              Commencer vos achats
            </button>
          </div>
        ) : (
          <div className="cart-content">
            <div className="cart-items">
              <div className="cart-items-header">
                <span className="product-header">Produit</span>
                <span className="quantity-header">Quantité</span>
                <span className="price-header">Prix</span>
              </div>

              {cart.items.map((item) => (
                <div className="cart-item" key={item.product._id}>
                  <div className="item-info">
                    <div className="item-image">
                      <img
                        src={item.product?.image?.[0] || "/placeholder.svg"}
                        alt={item.product?.name || "Produit"}
                      />
                    </div>
                    <div className="item-details">
                      <h3 className="item-name">{item.product?.name}</h3>
                      <button
                        className="remove-item"
                        onClick={() => removeItem(item.product._id)}
                      >
                        <Trash2 size={16} />
                        Supprimer
                      </button>
                    </div>
                  </div>

                  <div className="item-quantity">
                    <button
                      className="quantity-btn decrease"
                      onClick={() =>
                        updateQuantity(item.product._id, item.quantity - 1)
                      }
                      disabled={item.quantity <= 1}
                    >
                      <Minus size={16} />
                    </button>
                    <span className="quantity-value">{item.quantity}</span>
                    <button
                      className="quantity-btn increase"
                      onClick={() =>
                        updateQuantity(item.product._id, item.quantity + 1)
                      }
                    >
                      <Plus size={16} />
                    </button>
                  </div>

                  <div className="item-price">
                    <span className="price-value">
                      {formatPrice(item.product.price * item.quantity)}
                    </span>
                    <span className="unit-price">
                      {formatPrice(item.product.price)} / unité
                    </span>
                  </div>
                </div>
              ))}

              <div className="cart-actions">
                <button className="clear-cart" onClick={clearCart}>
                  <Trash2 size={16} />
                  Vider le panier
                </button>
                <button
                  className="continue-shopping"
                  onClick={() => navigate("/")}
                >
                  <ArrowLeft size={16} />
                  Continuer vos achats
                </button>
              </div>
            </div>

            <div className="cart-summary">
              <h2>Récapitulatif</h2>

              <div className="promo-code">
                <input
                  type="text"
                  placeholder="Code promo"
                  value={promoCode}
                  onChange={(e) => setPromoCode(e.target.value)}
                  disabled={promoApplied}
                />
                <button
                  className="apply-promo"
                  onClick={applyPromoCode}
                  disabled={promoApplied || !promoCode}
                >
                  Appliquer
                </button>
              </div>

              <div className="summary-details">
                <div className="summary-row">
                  <span>Sous-total</span>
                  <span>{formatPrice(subtotal)}</span>
                </div>
                {discount > 0 && (
                  <div className="summary-row discount">
                    <span>Réduction</span>
                    <span>-{formatPrice(discount)}</span>
                  </div>
                )}
                <div className="summary-row">
                  <span>TVA (20%)</span>
                  <span>{formatPrice(tax)}</span>
                </div>
                <div className="summary-row">
                  <span>Livraison</span>
                  <span>{shipping === 0 ? "Gratuite" : formatPrice(shipping)}</span>
                </div>
                <div className="summary-row total">
                  <span>Total</span>
                  <span>{formatPrice(total)}</span>
                </div>
              </div>

              {/* Local checkout navigation */}
              <button
                className="checkout-button"
                onClick={() =>
                  navigate("/Checkout", {
                    state: { cartItems: cart.items, total: total },
                  })
                }
              >
                Passer la commande
              </button>

              {/* Payment methods section using Stripe Checkout for card payments */}
              <div className="payment-methods">
                <p>Méthodes de paiement acceptées:</p>
                <div className="payment-icons">
                  <button className="payment-icon visa" onClick={handlePayment}>
                    VISA
                  </button>
                   <button className="payment-icon visa" onClick={handlePayment}>
                    <div className="payment-icon mastercard">
                    
                  </div>
                  </button>
                  
                  <div className="payment-icon paypal">PayPal</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Cart;
