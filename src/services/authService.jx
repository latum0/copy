import api from "./api"

export const authService = {
  // Inscription d'un nouvel utilisateur
  register: async (userData) => {
    try {
      const response = await api.post("/utilisateurs/inscription", userData)
      if (response.data.token) {
        localStorage.setItem("token", response.data.token)
        localStorage.setItem("user", JSON.stringify(response.data.utilisateur))
      }
      return response.data
    } catch (error) {
      throw error.response?.data || { error: "Une erreur est survenue" }
    }
  },

  // Connexion d'un utilisateur
  login: async (credentials) => {
    try {
      const response = await api.post("/utilisateurs/connexion", credentials)
      if (response.data.token) {
        localStorage.setItem("token", response.data.token)
        localStorage.setItem("user", JSON.stringify(response.data.utilisateur))
      }
      return response.data
    } catch (error) {
      throw error.response?.data || { error: "Une erreur est survenue" }
    }
  },

  // Déconnexion
  logout: () => {
    localStorage.removeItem("token")
    localStorage.removeItem("user")
  },

  // Obtenir l'utilisateur actuel
  getCurrentUser: () => {
    const user = localStorage.getItem("user")
    return user ? JSON.parse(user) : null
  },

  // Vérifier si l'utilisateur est connecté
  isAuthenticated: () => {
    return !!localStorage.getItem("token")
  },

  // Obtenir le profil de l'utilisateur
  getProfile: async () => {
    try {
      const response = await api.get("/utilisateurs/profil")
      return response.data
    } catch (error) {
      throw error.response?.data || { error: "Une erreur est survenue" }
    }
  },

  // Mettre à jour le profil
  updateProfile: async (userData) => {
    try {
      const response = await api.patch("/utilisateurs/profil", userData)
      localStorage.setItem("user", JSON.stringify(response.data))
      return response.data
    } catch (error) {
      throw error.response?.data || { error: "Une erreur est survenue" }
    }
  },
}

export default authService
